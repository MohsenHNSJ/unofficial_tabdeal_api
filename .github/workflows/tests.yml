name: Tests

on:
  push:
  pull_request:

jobs:
    build-tests:
        name: ${{ matrix.session }}
        runs-on: ubuntu-latest
        permissions:
          contents: write
        strategy:
            fail-fast: false
            matrix:
                include:
                    - { session: "pre-commit"}
                    - { session: "ruff_check" }
                    - { session: "docs_build" }
                    - { session: "mypy_type" }
                    - { session: "test" }

        env:
            NOXSESSION: ${{ matrix.session }}
            FORCE_COLOR: "1"
            PRE_COMMIT_COLOR: "always"

        steps:
            - name: Check out the repository
              uses: actions/checkout@v4.2.2

            - name: Set up Python 3.13
              uses: actions/setup-python@v5.5.0
              with:
                python-version: "3.13"
                check-latest: true

            - name: Upgrade pip if necessary
              run: |
                pip install --constraint=.github/workflows/constraints.txt pip
                pip --version

            - name: Capture Python version
              run: echo "PYTHON_VERSION=$(python --version | awk '{print $2}')" >> "$GITHUB_ENV"

            - name: Install Poetry
              run: |
                pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} poetry
                pipx inject poetry poetry-plugin-export
                poetry --version

            - name: Install Nox
              run: |
                pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} nox
                pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
                nox --version

            - name: Run Nox
              run: |
                nox --python=3.13

    compatibility-tests:
      name: Compatibility with Python ${{ matrix.python-version }}
      runs-on: ubuntu-latest
      permissions:
        contents: write
      strategy:
        fail-fast: false
        matrix:
          python-version: ["3.11", "3.12", "3.13"]

      env:
        NOXSESSION: test_and_coverage
        FORCE_COLOR: "1"
        PRE_COMMIT_COLOR: "always"

      steps:
        - name: Check out the repository
          uses: actions/checkout@v4.2.2

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5.5.0
          with:
            python-version: ${{ matrix.python-version }}
            check-latest: true

        - name: Upgrade pip if necessary
          run: |
            pip install --constraint=.github/workflows/constraints.txt pip
            pip --version

        - name: Capture Python version
          run: echo "PYTHON_VERSION=$(python --version | awk '{print $2}')" >> "$GITHUB_ENV"

        - name: Install Poetry
          run: |
            pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} poetry
            pipx inject poetry poetry-plugin-export
            poetry --version

        - name: Install Nox
          run: |
            pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} nox
            pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
            nox --version

        - name: Run Nox
          run: |
            nox -s test-${{ matrix.python-version }}



        - name: Upload coverage data
          uses: actions/upload-artifact@v4.6.2
          with:
            name: coverage-data${{ env.PYTHON_VERSION }}
            path: ".coverage.*"
            include-hidden-files: true
            compression-level: 0

    coverage:
      name: Produce coverage report
      runs-on: ubuntu-latest
      needs: compatibility-tests
      permissions:
        id-token: write
      steps:
        - name: Check out the repository
          uses: actions/checkout@v4.2.2

        - name: Set up Python 3.13
          uses: actions/setup-python@v5.5.0
          with:
            python-version: "3.13"
            check-latest: true

        - name: Upgrade pip if necessary
          run: |
            pip install --constraint=.github/workflows/constraints.txt pip
            pip --version

        - name: Capture Python version
          run: echo "PYTHON_VERSION=$(python --version | awk '{print $2}')" >> "$GITHUB_ENV"

        - name: Install Poetry
          run: |
            pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} poetry
            pipx inject poetry poetry-plugin-export
            poetry --version

        - name: Install Nox
          run: |
            pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} nox
            pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
            nox --version

        - name: Install Coverage
          run: |
            pipx install --pip-args=--constraint=.github/workflows/constraints.txt --python ${{ env.PYTHON_VERSION }} coverage
            coverage --version

        - name: Download coverage data
          uses: actions/download-artifact@v4.2.1
          with:
            pattern: coverage-data*

        - name: Move coverage files to root folder
          run: |
            find ~/ -type f -name '.coverage.*' -exec mv -t /home/runner/work/unofficial_tabdeal_api/unofficial_tabdeal_api/ {} +

        - name: Combine coverage data and report
          run: |
            nox -s coverage-3.13

        - name: Upload coverage report To Codecov
          uses: codecov/codecov-action@v5.4.0
          with:
            # Disable search for coverage files.
             #This is helpful when specifying what files you want to upload with the files option.
            disable_search: true
            # On error, exit with non-zero code
            fail_ci_if_error: true
            # Comma-separated explicit list of files to upload.
            # These will be added to the coverage files found for upload.
            # If you wish to only upload the specified files, please consider using "disable-search" to disable uploading other files.
            files: ./coverage.xml
            # Use OIDC instead of token. This will ignore any token supplied
            use_oidc: true
            # Enable verbose logging
            verbose: true

    security:
      name: Security check
      runs-on: ubuntu-latest
      permissions:
        contents: read
      steps:
        - name: Check out the repository
          uses: actions/checkout@v4.2.2

        - name: Run Safety CLI to check for vulnerabilities
          uses: pyupio/safety-action@v1.0.1
          with:
            api-key: ${{ secrets.SAFETY_CLI_API }}
            args: --detailed-report # To always see detailed output from this action
